apiVersion: v1
data:
  # /etc/sentry/config.yml
  config.yml: |
    system.internal-url-prefix: 'http://web:9000'
    symbolicator.enabled: true
    symbolicator.options:
      url: http://symbolicator:3021

    transaction-events.force-disable-internal-project: true

    github-app.id: {{ .Values.github.app.id }}
    github-app.name: '{{ .Values.github.app.name }}'
    github-app.webhook-secret: '{{ .Values.github.webhook_secret }}'
    github-app.client-id: '{{ .Values.github.app.client_id }}'
    github-app.client-secret: '{{ .Values.github.app.client_secret }}'
    github-app.private-key: |
{{ .Values.github.app.private_key | indent 6 }}

    {{- if eq .Values.persistence.type.filestore "BindMount" }}
    filestore.backend: 'filesystem'
    {{- else if eq .Values.persistence.type.filestore "S3" }}
    filestore.backend: 's3'
    {{- with .Values.persistence.s3 }}
    filestore.options:
      access_key: {{ .access_key }}
      secret_key: {{ .secret_key }}
      bucket_name: {{ .bucket_name }}
      {{- with .endpoint_url }}
      endpoint_url: {{ . }}
      {{- end }}
    {{- end }}
    {{- end }}

  sentry.conf.py: |-
    # This file is just Python, with a touch of Django which means
    # you can inherit and tweak settings to your hearts content.

    from sentry.conf.server import *  # NOQA
    from sentry.utils.types import Bool

    BYTE_MULTIPLIER = 1024
    UNITS = ("K", "M", "G")
    def unit_text_to_bytes(text):
        unit = text[-1].upper()
        power = UNITS.index(unit) + 1
        return float(text[:-1])*(BYTE_MULTIPLIER**power)

    DATABASES = {
        "default": {
            "ENGINE": "sentry.db.postgres",
            "NAME": env('SENTRY_DB_NAME'),
            "USER": env('SENTRY_DB_USER'),
            "PASSWORD": env('SENTRY_DB_PASSWORD'),
            "HOST": env('SENTRY_POSTGRES_HOST'),
            "PORT": "",
        }
    }

    # You should not change this setting after your database has been created
    # unless you have altered all schemas first
    SENTRY_USE_BIG_INTS = True

    # If you're expecting any kind of real traffic on Sentry, we highly recommend
    # configuring the CACHES and Redis settings

    ###########
    # General #
    ###########

    # Instruct Sentry that this install intends to be run by a single organization
    # and thus various UI optimizations should be enabled.
    SENTRY_SINGLE_ORGANIZATION = True

    SENTRY_OPTIONS["system.event-retention-days"] = int(
        env("SENTRY_EVENT_RETENTION_DAYS", "90")
    )

    #########
    # Redis #
    #########

    # Generic Redis configuration used as defaults for various things including:
    # Buffers, Quotas, TSDB

    SENTRY_OPTIONS["redis.clusters"] = {
        "default": {
            "hosts": {0: {"host": "redis.{{ .Release.Namespace }}.svc.cluster.local.", "password": "", "port": "6379", "db": "0"}}
        }
    }

    #########
    # Queue #
    #########

    # See https://docs.getsentry.com/on-premise/server/queue/ for more
    # information on configuring your queue broker and workers. Sentry relies
    # on a Python framework called Celery to manage queues.

    BROKER_URL = "redis://redis.{{ .Release.Namespace }}.svc.cluster.local/0"


    #########
    # Cache #
    #########

    # Sentry currently utilizes two separate mechanisms. While CACHES is not a
    # requirement, it will optimize several high throughput patterns.

    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
            "LOCATION": ["memcached:11211"],
            "TIMEOUT": 3600,
            "OPTIONS": {"ignore_exc": True}
        }
    }

    # A primary cache is required for things such as processing events
    SENTRY_CACHE = "sentry.cache.redis.RedisCache"

    DEFAULT_KAFKA_OPTIONS = {
        "bootstrap.servers": "kafka.kafka.svc.cluster.local:9092",
        "message.max.bytes": 50000000,
        "socket.timeout.ms": 1000,
    }

    SENTRY_EVENTSTREAM = "sentry.eventstream.kafka.KafkaEventStream"
    SENTRY_EVENTSTREAM_OPTIONS = {"producer_configuration": DEFAULT_KAFKA_OPTIONS}

    KAFKA_CLUSTERS["default"] = DEFAULT_KAFKA_OPTIONS

    ###############
    # Rate Limits #
    ###############

    # Rate limits apply to notification handlers and are enforced per-project
    # automatically.

    SENTRY_RATELIMITER = "sentry.ratelimits.redis.RedisRateLimiter"

    ##################
    # Update Buffers #
    ##################

    # Buffers (combined with queueing) act as an intermediate layer between the
    # database and the storage API. They will greatly improve efficiency on large
    # numbers of the same events being sent to the API in a short amount of time.
    # (read: if you send any kind of real data to Sentry, you should enable buffers)

    SENTRY_BUFFER = "sentry.buffer.redis.RedisBuffer"

    ##########
    # Quotas #
    ##########

    # Quotas allow you to rate limit individual projects or the Sentry install as
    # a whole.

    SENTRY_QUOTAS = "sentry.quotas.redis.RedisQuota"

    ########
    # TSDB #
    ########

    # The TSDB is used for building charts as well as making things like per-rate
    # alerts possible.

    SENTRY_TSDB = "sentry.tsdb.redissnuba.RedisSnubaTSDB"

    #########
    # SNUBA #
    #########

    SENTRY_SEARCH = "sentry.search.snuba.EventsDatasetSnubaSearchBackend"
    SENTRY_SEARCH_OPTIONS = {}
    SENTRY_TAGSTORE_OPTIONS = {}

    ###########
    # Digests #
    ###########

    # The digest backend powers notification summaries.

    SENTRY_DIGESTS = "sentry.digests.backends.redis.RedisBackend"

    ###################
    # Metrics Backend #
    ###################

    SENTRY_RELEASE_HEALTH = "sentry.release_health.metrics.MetricsReleaseHealthBackend"
    SENTRY_RELEASE_MONITOR = "sentry.release_health.release_monitor.metrics.MetricReleaseMonitorBackend"

    ###############
    # Mail Server #
    ###############

    email = env("SENTRY_EMAIL_HOST")
    if email:
        SENTRY_OPTIONS["mail.backend"] = "smtp"
        SENTRY_OPTIONS["mail.host"] = email
        SENTRY_OPTIONS["mail.password"] = env("SENTRY_EMAIL_PASSWORD") or ""
        SENTRY_OPTIONS["mail.username"] = env("SENTRY_EMAIL_USER") or ""
        SENTRY_OPTIONS["mail.port"] = int(env("SENTRY_EMAIL_PORT") or 25)
        SENTRY_OPTIONS["mail.use-tls"] = Bool(env("SENTRY_EMAIL_USE_TLS", False))
    else:
        SENTRY_OPTIONS["mail.backend"] = "dummy"

    # The email address to send on behalf of
    SENTRY_OPTIONS["mail.from"] = env("SENTRY_SERVER_EMAIL") or "root@localhost"

    ##############
    # Web Server #
    ##############

    SENTRY_WEB_HOST = "0.0.0.0"
    SENTRY_WEB_PORT = 9000
    SENTRY_WEB_OPTIONS = {
        "http": "%s:%s" % (SENTRY_WEB_HOST, SENTRY_WEB_PORT),
        "protocol": "uwsgi",
        # This is needed in order to prevent https://github.com/getsentry/sentry/blob/c6f9660e37fcd9c1bbda8ff4af1dcfd0442f5155/src/sentry/services/http.py#L70
        "uwsgi-socket": None,
        "so-keepalive": True,
        # Keep this between 15s-75s as that's what Relay supports
        "http-keepalive": 15,
        "http-chunked-input": True,
        # the number of web workers
        "workers": {{ .Values.sentry.ui.workers }},
        "threads": 4,
        "memory-report": False,
        # Some stuff so uwsgi will cycle workers sensibly
        "max-requests": 100000,
        "max-requests-delta": 500,
        "max-worker-lifetime": 86400,
        # Duplicate options from sentry default just so we don't get
        # bit by sentry changing a default value that we depend on.
        "thunder-lock": True,
        "log-x-forwarded-for": False,
        "buffer-size": 32768,
        "limit-post": 209715200,
        "disable-logging": True,
        "reload-on-rss": 600,
        "ignore-sigpipe": True,
        "ignore-write-errors": True,
        "disable-write-exception": True,
    }

    {{- if .Values.ingress.tls_secret_name }}
    ###########
    # SSL/TLS #
    ###########

    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SOCIAL_AUTH_REDIRECT_IS_HTTPS = True

    # End of SSL/TLS settings
    {{- end }}

    ############
    # Features #
    ############

    SENTRY_FEATURES["projects:sample-events"] = False
    SENTRY_FEATURES.update(
        {
            feature: True
            for feature in (
                "organizations:discover",
                "organizations:events",
                "organizations:global-views",
                "organizations:codecov-integration",
                "organizations:grouping-tree-ui",
                "organizations:set-grouping-config",
                "organizations:grouping-title-ui",
                "organizations:incidents",
                "organizations:integrations-issue-basic",
                "organizations:integrations-issue-sync",
                "organizations:invite-members",
                "organizations:metric-alert-builder-aggregate",
                "organizations:sso-basic",
                "organizations:sso-rippling",
                "organizations:sso-saml2",
                "organizations:performance-view",
                "organizations:performance-view",
                "organizations:advanced-search",
                "organizations:session-replay",
                "organizations:issue-platform",
                "organizations:profiling",
                "organizations:dashboards-mep",
                "organizations:mep-rollout-flag",
                "organizations:dashboards-rh-widget",
                "organizations:metrics-extraction",
                "organizations:transaction-metrics-extraction",
                "projects:custom-inbound-filters",
                "projects:data-forwarding",
                "projects:discard-groups",
                "projects:plugins",
                "projects:rate-limits",
                "projects:servicehooks",
            )
        }
    )

    #######################
    # MaxMind Integration #
    #######################

    GEOIP_PATH_MMDB = '/geoip/GeoLite2-City.mmdb'

    #########################
    # Bitbucket Integration #
    #########################

    # BITBUCKET_CONSUMER_KEY = 'YOUR_BITBUCKET_CONSUMER_KEY'
    # BITBUCKET_CONSUMER_SECRET = 'YOUR_BITBUCKET_CONSUMER_SECRET'

    ##############################################
    # Suggested Fix Feature / OpenAI Integration #
    ##############################################

    # See https://docs.sentry.io/product/issues/issue-details/ai-suggested-solution/
    # for more information about the feature. Make sure the OpenAI's privacy policy is
    # aligned with your company.

    # Set the feature to be True if you'd like to enable Suggested Fix. You'll also need to
    # add your OPENAI_API_KEY to the docker-compose.yml file.
    SENTRY_FEATURES["organizations:open-ai-suggestion"] = False

    ##############################################
    # Content Security Policy settings
    ##############################################

    # CSP_REPORT_URI = "https://{your-sentry-installation}/api/{csp-project}/security/?sentry_key={sentry-key}"
    CSP_REPORT_ONLY = True

    # optional extra permissions
    # https://django-csp.readthedocs.io/en/latest/configuration.html
    # CSP_SCRIPT_SRC += ["example.com"]

    SENTRY_OPTIONS['system.secret-key'] = env('SENTRY_SECRET_KEY')

    {{- if .Values.relay.public_key }}
    SENTRY_RELAY_WHITELIST_PK = ['{{ .Values.relay.public_key }}']
    {{- end }}

    {{- if .Values.prometheus.enabled }}
    SENTRY_METRICS_BACKEND2 = 'sentry.metrics.statsd.StatsdMetricsBackend'
    SENTRY_METRICS_OPTIONS2 = {
        'host': 'statsd.{{ .Release.Namespace }}.svc.cluster.local.'
    }
    {{- end }}
kind: ConfigMap
metadata:
  name: sentryconfig
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: '0'
